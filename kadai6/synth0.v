/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* top =  1  *)
(* src = "vm.v:1" *)
module vm(a, b, clk, rst, change);
  (* src = "vm.v:15" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  (* src = "vm.v:1" *)
  input a;
  (* src = "vm.v:1" *)
  input b;
  (* src = "vm.v:1" *)
  output [2:0] change;
  (* src = "vm.v:1" *)
  input clk;
  (* src = "vm.v:4" *)
  (* unused_bits = "0" *)
  wire [1:0] cnt;
  (* src = "vm.v:3" *)
  wire [2:0] nchange;
  (* src = "vm.v:1" *)
  input rst;
  (* src = "vm.v:2" *)
  (* unused_bits = "0" *)
  wire [5:0] state;
  assign _00_[2] = state[2] & ~(a);
  assign _02_ = ~b;
  assign _01_ = ~((_02_ | a) & state[2]);
  reg \state_reg[2] ;
  (* src = "vm.v:6" *)
  always @(posedge clk or posedge 1'h0 or posedge rst)
    if (rst)
      \state_reg[2]  <= 0;
    else if (1'h0)
      \state_reg[2]  <= 1;
    else
      \state_reg[2]  <= 1'h0;
  assign state[2] = \state_reg[2] ;
  reg \change_reg[1] ;
  (* src = "vm.v:6" *)
  always @(posedge clk or posedge rst)
    if (rst)
      \change_reg[1]  <= 0;
    else
      \change_reg[1]  <= nchange[1];
  assign change[1] = \change_reg[1] ;
  reg \change_reg[2] ;
  (* src = "vm.v:6" *)
  always @(posedge clk or posedge rst)
    if (rst)
      \change_reg[2]  <= 0;
    else
      \change_reg[2]  <= nchange[2];
  assign change[2] = \change_reg[2] ;
  (* src = "vm.v:15" *)
  \$_DLATCH_P_  _09_ (
    .D(state[2]),
    .E(_01_),
    .Q(nchange[1])
  );
  (* src = "vm.v:15" *)
  \$_DLATCH_P_  _10_ (
    .D(_00_[2]),
    .E(_01_),
    .Q(nchange[2])
  );
  assign _00_[1:0] = { state[2], state[2] };
  assign change[0] = change[1];
  assign cnt[1] = a;
  assign nchange[0] = nchange[1];
  assign { state[5:3], state[1] } = { state[2], state[2], state[2], state[2] };
endmodule
