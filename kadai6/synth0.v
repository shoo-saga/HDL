/* Generated by Yosys 0.9 (git sha1 1979e0b1, i686-w64-mingw32.static-g++ 5.5.0 -Os) */

(* top =  1  *)
(* src = "vm.v:1" *)
module vm(a, b, clk, rst, change, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  (* src = "vm.v:1" *)
  input a;
  (* src = "vm.v:1" *)
  input b;
  (* src = "vm.v:1" *)
  output [2:0] change;
  (* src = "vm.v:1" *)
  input clk;
  (* src = "vm.v:2" *)
  wire [5:0] nstate;
  (* src = "vm.v:1" *)
  output out;
  (* src = "vm.v:1" *)
  input rst;
  (* src = "vm.v:2" *)
  reg [5:0] state;
  assign _00_ = a ^ b;
  assign _01_ = b & ~(a);
  assign _02_ = ~(_01_ | _00_);
  assign _03_ = ~state[1];
  assign _04_ = state[4] | state[5];
  assign _05_ = state[2] | state[3];
  assign _06_ = ~(_05_ | _04_);
  assign _07_ = ~(_06_ & _03_);
  assign nstate[0] = _07_ ? state[5] : _02_;
  assign _08_ = a & ~(b);
  assign _09_ = _02_ & ~(_03_);
  assign nstate[1] = _07_ ? _09_ : _08_;
  assign _10_ = ~((_02_ & state[2]) | (state[1] & _08_));
  assign nstate[2] = _07_ & ~(_10_);
  assign _11_ = ~((_02_ & state[3]) | (state[2] & _08_));
  assign nstate[3] = _07_ & ~(_11_);
  assign _12_ = state[4] & ~(_00_);
  assign _13_ = ~((_08_ & state[3]) | _12_);
  assign nstate[4] = _07_ & ~(_13_);
  assign _14_ = a | ~(b);
  assign _15_ = ~state[3];
  assign _16_ = ~state[2];
  assign change[1] = ~((_16_ & _15_) | _14_);
  assign _17_ = ~((_00_ & state[4]) | change[1]);
  assign _18_ = ~((_14_ | _03_) & _17_);
  assign nstate[5] = _07_ ? _18_ : _01_;
  assign _19_ = state[0] | state[5];
  assign _20_ = ~(_19_ | state[4]);
  assign _21_ = _05_ | ~(_20_);
  assign change[0] = ~((_21_ & _15_) | _14_);
  assign _22_ = _14_ | ~(state[4]);
  assign change[2] = _21_ & ~(_22_);
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[0] <= 0;
    else
      state[0] <= nstate[0];
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[1] <= 0;
    else
      state[1] <= nstate[1];
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[2] <= 0;
    else
      state[2] <= nstate[2];
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[3] <= 0;
    else
      state[3] <= nstate[3];
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[4] <= 0;
    else
      state[4] <= nstate[4];
  (* src = "vm.v:4" *)
  always @(posedge clk or posedge rst)
    if (rst)
      state[5] <= 1;
    else
      state[5] <= nstate[5];
  assign out = state[5];
endmodule
